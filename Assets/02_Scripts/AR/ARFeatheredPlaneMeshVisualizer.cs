using System.Collections.Generic;
using UnityEngine.XR.ARFoundation;

namespace UnityEngine.XR.AR
{
    [RequireComponent(typeof(ARPlaneMeshVisualizer))]
    [RequireComponent(typeof(MeshRenderer))]
    [RequireComponent(typeof(ARPlane))]
    public class ARFeatheredPlaneMeshVisualizer : MonoBehaviour
    {
        private static List<Vector3> FeatheringUVs { get; set; }
        private static List<Vector3> Vertices { get; set; }

        [Tooltip("The width of the texture feathering (in world units).")]
        [SerializeField] private float featheringWidth = 0.2f;
        /// <summary>
        /// The width of the texture feathering (in world units).
        /// </summary>
        private float FeatheringWidth
        {
            get { return featheringWidth; }
            set { featheringWidth = value; }
        }

        private ARPlaneMeshVisualizer ARPlaneMeshVisualizerComponent { get; set; }
        private ARPlane ARPlaneComponent { get; set; }
        private Material FeatheredPlaneMaterial { get; set; }

        protected virtual void Awake()
        {
            FeatheringUVs = new List<Vector3>();
            Vertices = new List<Vector3>();

            ARPlaneMeshVisualizerComponent = GetComponent<ARPlaneMeshVisualizer>();
            FeatheredPlaneMaterial = GetComponent<MeshRenderer>().material;
            ARPlaneComponent = GetComponent<ARPlane>();
        }

        protected virtual void OnEnable()
        {
            ARPlaneComponent.boundaryChanged += OnBoundaryChangedCallback;
        }

        protected virtual void OnDisable()
        {
            ARPlaneComponent.boundaryChanged -= OnBoundaryChangedCallback;
        }

        private void OnBoundaryChangedCallback(ARPlaneBoundaryChangedEventArgs eventArgs)
        {
            GenerateBoundaryUVs(ARPlaneMeshVisualizerComponent.mesh);
        }

        /// <summary>
        /// Generate UV2s to mark the boundary vertices and feathering UV coords.
        /// </summary>
        /// <remarks>
        /// The <c>ARPlaneMeshVisualizer</c> has a <c>meshUpdated</c> event that can be used to modify the generated
        /// mesh. In this case we'll add UV2s to mark the boundary vertices.
        /// This technique avoids having to generate extra vertices for the boundary. It works best when the plane is 
        /// is fairly uniform.
        /// </remarks>
        /// <param name="mesh">The <c>Mesh</c> generated by <c>ARPlaneMeshVisualizer</c></param>
        private void GenerateBoundaryUVs(Mesh mesh)
        {
            int vertexCount = mesh.vertexCount;

            FeatheringUVs.Clear();

            // Reuse the list of UVs
            if (FeatheringUVs.Capacity < vertexCount)
            {
                FeatheringUVs.Capacity = vertexCount;
            }

            mesh.GetVertices(Vertices);

            Vector3 centerInPlaneSpace = Vertices[Vertices.Count - 1];
            Vector3 uv = new Vector3(0, 0, 0);
            float shortestUVMapping = float.MaxValue;

            // Assume the last vertex is the center vertex.
            for (int i = 0; i < vertexCount - 1; i++)
            {
                float vertexDist = Vector3.Distance(Vertices[i], centerInPlaneSpace);

                // Remap the UV so that a UV of "1" marks the feathering boudary.
                // The ratio of featherBoundaryDistance/edgeDistance is the same as featherUV/edgeUV.
                // Rearrange to get the edge UV.
                float uvMapping = vertexDist / Mathf.Max(vertexDist - FeatheringWidth, 0.001f);
                uv.x = uvMapping;

                // All the UV mappings will be different. In the shader we need to know the UV value we need to fade out by.
                // Choose the shortest UV to guarentee we fade out before the border.
                // This means the feathering widths will be slightly different, we again rely on a fairly uniform plane.
                if (shortestUVMapping > uvMapping)
                {
                    shortestUVMapping = uvMapping;
                }

                FeatheringUVs.Add(uv);
            }

            FeatheredPlaneMaterial.SetFloat("_ShortestUVMapping", shortestUVMapping);

            // Add the center vertex UV
            uv.Set(0, 0, 0);
            FeatheringUVs.Add(uv);

            mesh.SetUVs(1, FeatheringUVs);
            mesh.UploadMeshData(false);
        }
    }
}